language: cpp
matrix:
  include:
    - os: linux
      dist: trusty
      compiler: gcc
      addons:
        apt:
          sources: 
            - sourceline: 'deb https://snapshot.debian.org/archive/debian/20110127T084257Z/ lenny main'
            - sourceline: 'deb-src https://snapshot.debian.org/archive/debian/20110127T084257Z/ lenny main'
            - sourceline: 'deb https://snapshot.debian.org/archive/debian-security/20110127T084257Z/ lenny/updates main'
            - sourceline: 'deb-src https://snapshot.debian.org/archive/debian-security/20110127T084257Z/ lenny/updates main'
            #- sourceline: 'deb http://archive.ubuntu.com/ubuntu/ hardy universe'
            #- sourceline: 'deb-src http://archive.ubuntu.com/ubuntu/ hardy universe'
          packages: ['g++-3.4']
      env: 
      - COMPILER=g++-3.4
      - BUILD_LIB_SCRIPT="./build_lib.sh"
      - BUILD_SCRIPT="./build_tests.sh"
      - RUN_SCRIPT="./run_tests.sh"
      before_install:
      - sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com `sudo apt-get update 2>&1 | grep -o '[0-9A-Z]\{16\}$' | xargs`
      before_script:
      - sudo apt-get --allow-unauthenticated install g++-3.3
      - dpkg --list | grep compiler


    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.4']
      env: 
      - COMPILER=g++-4.4
      - BUILD_LIB_SCRIPT="./build_lib.sh"
      - BUILD_SCRIPT="./build_tests.sh"
      - RUN_SCRIPT="./run_tests.sh"

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.6']
      env: 
      - COMPILER=g++-4.6
      - BUILD_LIB_SCRIPT="./build_lib.sh"
      - BUILD_SCRIPT="./build_tests.sh"
      - RUN_SCRIPT="./run_tests.sh"

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.8']
      env: 
      - COMPILER=g++-4.8
      - BUILD_LIB_SCRIPT="./build_lib.sh"
      - BUILD_SCRIPT="./build_tests.sh"
      - RUN_SCRIPT="./run_tests.sh"

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9']
      env: 
      - COMPILER=g++-4.9
      - BUILD_LIB_SCRIPT="./build_lib.sh"
      - BUILD_SCRIPT="./build_tests.sh"
      - RUN_SCRIPT="./run_tests.sh"

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5']
      env: 
      - COMPILER=g++-5
      - BUILD_LIB_SCRIPT="./build_lib.sh"
      - BUILD_SCRIPT="./build_tests.sh"
      - RUN_SCRIPT="./run_tests.sh"

    - os: linux
      compiler: clang
      env: 
      - COMPILER=clang++
      - BUILD_LIB_SCRIPT="./build_lib.sh"
      - BUILD_SCRIPT="./build_tests.sh"
      - RUN_SCRIPT="./run_tests.sh"

    - os: linux
      compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.5']
          packages: ['clang-3.5']
      env: 
      - COMPILER=clang++-3.5
      - BUILD_LIB_SCRIPT="./build_lib.sh"
      - BUILD_SCRIPT="./build_tests.sh"
      - RUN_SCRIPT="./run_tests.sh"

    - os: linux
      compiler: gcc
      dist: precise
      env:
      - COMPILER=g++
      - CODE_COVERAGE_LIBS=-lgcov
      - CODE_COVERAGE_FLAGS=--coverage -fprofile-arcs -ftest-coverage
      - BUILD_LIB_SCRIPT="./build_lib.sh"
      - BUILD_SCRIPT="./build_tests.sh"
      - RUN_SCRIPT="./run_tests.sh"
      before_install: 
      - sudo pip install codecov
      after_success:
      - chmod +x ./get_code_cov.sh
      - ./get_code_cov.sh
      - codecov

    - os: osx
      osx_image: xcode9
      env: 
      - COMPILER=clang++
      - BUILD_LIB_SCRIPT=./build_lib.sh
      - BUILD_SCRIPT=./build_tests.sh
      - RUN_SCRIPT=./run_tests.sh

    - os: windows
      env: 
      - BUILD_LIB_SCRIPT=build_lib.bat
      - BUILD_SCRIPT=build_tests.bat
      - RUN_SCRIPT=run_tests.bat
      script:
      - echo "script started"
      - cd ./stdex
      - echo "call \"C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\vsvars32.bat\"" > ~$BUILD_LIB_SCRIPT
      - cat $BUILD_LIB_SCRIPT >> ~$BUILD_LIB_SCRIPT
      - chmod +x ./~$BUILD_LIB_SCRIPT
      - ./~$BUILD_LIB_SCRIPT
      - cd ..
      - echo "call \"C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\vsvars32.bat\"" > ~$BUILD_SCRIPT
      - cat $BUILD_SCRIPT >> ~$BUILD_SCRIPT
      - chmod +x ./~$BUILD_SCRIPT
      - ./~$BUILD_SCRIPT
      - chmod +x ./$RUN_SCRIPT
      - ./$RUN_SCRIPT

    - os: windows
      env: 
      - BUILD_LIB_SCRIPT=build_lib.bat
      - BUILD_SCRIPT=build_tests.bat
      - RUN_SCRIPT=run_tests.bat
      script:
        #call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat" &&
      - echo "script started"
      - cd ./stdex
      - echo "call \"C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvars64.bat\"" > ~$BUILD_LIB_SCRIPT
      - cat $BUILD_LIB_SCRIPT >> ~$BUILD_LIB_SCRIPT
      - chmod +x ./~$BUILD_LIB_SCRIPT
      - ./~$BUILD_LIB_SCRIPT
      - cd ..
      - echo "call \"C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvars64.bat\"" > ~$BUILD_SCRIPT
      - cat $BUILD_SCRIPT >> ~$BUILD_SCRIPT
      - chmod +x ./~$BUILD_SCRIPT
      - ./~$BUILD_SCRIPT
      - chmod +x ./$RUN_SCRIPT
      - ./$RUN_SCRIPT

script:
  - echo "script started"
  - cd ./stdex
  - chmod +x $BUILD_LIB_SCRIPT
  - $BUILD_LIB_SCRIPT
  - cd ..
  - chmod +x $BUILD_SCRIPT
  - $BUILD_SCRIPT
  - chmod +x $RUN_SCRIPT
  - $RUN_SCRIPT
#make CXX=$COMPILER -j3